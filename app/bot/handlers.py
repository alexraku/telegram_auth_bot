import hashlib
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Update
from aiogram.filters import CommandStart, Command
from sqlalchemy.ext.asyncio import AsyncSession
from loguru import logger

from app.bot.keyboards import get_auth_keyboard, get_auth_result_keyboard
from app.services.redis_service import redis_service
from app.services.auth_service import auth_service
from app.database.database import get_db


router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    welcome_text = f"""
üîê <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.

<i>–í–∞—à Telegram ID:</i> <code>{user.id}</code>

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.
"""
    
    await message.answer(welcome_text)


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>

üîπ –ö–æ–≥–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è, —Ç—Ä–µ–±—É—é—â–∞—è –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" / "–ù–µ—Ç"

üîπ –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è

üîπ –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è

üîπ –î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/support - –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
"""
    
    await message.answer(help_text)


@router.message(Command("support"))
async def cmd_support(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support"""
    support_text = f"""
üÜò <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:

üìß Email: support@yourcompany.com
üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 18:00 (–ú–°–ö)

<i>–í–∞—à Telegram ID –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</i> <code>{message.from_user.id}</code>
"""
    
    await message.answer(support_text)


@router.callback_query(F.data.startswith("auth_"))
async def handle_auth_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data
        action, request_id = callback.data.split(":", 1)
        user_id = callback.from_user.id
        
        logger.info(f"Auth callback: {action} for request {request_id} from user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ Redis
        request_info = await redis_service.get_auth_request(request_id)
        
        if not request_info:
            await callback.answer(
                "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", 
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
        if request_info.get('telegram_id') != user_id:
            await callback.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", 
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if request_info.get('status') != 'pending':
            await callback.answer(
                f"‚ùå –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {request_info.get('status')}", 
                show_alert=True
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if action == "auth_approve":
            await auth_service.approve_request(request_id, user_id)
            result_text = "‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\\n\\n–í–∞—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É."
            callback_text = "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
            
        elif action == "auth_reject":
            await auth_service.reject_request(request_id, user_id)
            result_text = "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\\n\\n–í–∞—à –æ—Ç–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–∏—Å—Ç–µ–º—É."
            callback_text = "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.answer(callback_text, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        original_text = callback.message.html_text
        updated_text = f"{original_text}\\n\\n{result_text}"
        
        await callback.message.edit_text(
            updated_text,
            reply_markup=get_auth_result_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error handling auth callback: {e}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", 
            show_alert=True
        )


@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" """
    await callback.message.delete()
    await cmd_start(callback.message)
    await callback.answer()


async def send_auth_request_to_user(
    telegram_id: int,
    request_id: str,
    operation: str,
    amount: str = None,
    client_id: str = None
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        from app.bot.bot import bot
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"""
üîê <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_id}
üí∞ <b>–û–ø–µ—Ä–∞—Ü–∏—è:</b> {operation}
"""
        
        if amount:
            message_text += f"\\nüíµ <b>–°—É–º–º–∞:</b> {amount}"
        
        message_text += """

‚è∞ <b>–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è:</b> 5 –º–∏–Ω—É—Ç

<i>–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏?</i>
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.send_message(
            chat_id=telegram_id,
            text=message_text,
            reply_markup=get_auth_keyboard(request_id)
        )
        
        logger.info(f"Auth request sent to user {telegram_id}")
        
    except Exception as e:
        logger.error(f"Error sending auth request to user: {e}")
        raise
