import hashlib
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Update, Contact
from aiogram.filters import CommandStart, Command
from sqlalchemy.ext.asyncio import AsyncSession
from loguru import logger

from app.bot.keyboards import (
    get_auth_keyboard, 
    get_auth_result_keyboard,
    get_registration_keyboard,
    get_registration_confirmation_keyboard,
    remove_keyboard,
    get_main_menu_keyboard,
)
from app.services.redis_service import redis_service
from app.services.auth_service import auth_service
from app.database.database import get_db


router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    telegram_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_registered = await auth_service.is_user_registered(telegram_id)
    
    if is_registered:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        welcome_text = f"""
üîê **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π.

*–í–∞—à Telegram ID:* `{user.id}`
"""
        await message.answer(welcome_text, reply_markup=get_main_menu_keyboard())
        
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        registration_text = f"""
üîê **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.

üì± **–®–∞–≥ 1:** –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –±–∞–∑–µ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–≤—è–∂–µ–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∫–ª–∏–µ–Ω—Ç–∞.

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
"""
        await message.answer(registration_text, reply_markup=get_registration_keyboard())


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_registration(message: Message):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await message.answer(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.",
        reply_markup=remove_keyboard()
    )


@router.message(F.contact)
async def handle_contact(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact: Contact = message.contact
    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    if contact.user_id != user.id:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞!**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–µ–Ω–Ω–æ —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
            "–∞ –Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.",
            reply_markup=get_registration_keyboard()
        )
        return
    
    phone_number = contact.phone_number
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("üîç **–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...**", reply_markup=remove_keyboard())
    
    # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ
    client_info = await auth_service.get_client_by_phone(phone_number)
    
    if not client_info:
        # –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ
        await message.answer(
            f"‚ùå **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–º–µ—Ä `{phone_number}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"
            f"**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
            f"‚Ä¢ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä –Ω–µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ\n\n"
            f"**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
            f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n"
            f"üìû **–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:** support@yourcompany.com"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç —Å –¥—Ä—É–≥–∏–º Telegram
    if client_info['registration_status'] == 'completed':
        await message.answer(
            f"‚ö†Ô∏è **–ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω**\n\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ `{phone_number}` —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n"
            f"–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä, –Ω–æ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Telegram, "
            f"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏."
        )
        return
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    confirmation_text = f"""
‚úÖ **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω!**

**–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:**
üë§ –ò–º—è: {client_info.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} {client_info.get('last_name', '')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: `{phone_number}`
üÜî ID –∫–ª–∏–µ–Ω—Ç–∞: `{client_info['client_id']}`

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏?
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Redis
    await redis_service.redis.setex(
        f"registration:{user.id}",
        300,  # 5 –º–∏–Ω—É—Ç
        f"{phone_number}|{client_info['client_id']}"
    )
    
    await message.answer(confirmation_text, reply_markup=get_registration_confirmation_keyboard())


@router.callback_query(F.data == "confirm_registration")
async def confirm_registration(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user = callback.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ Redis
    registration_data = await redis_service.redis.get(f"registration:{user.id}")
    
    if not registration_data:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        await callback.message.edit_text(
            "‚ùå **–°–µ—Å—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–∞**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return
    
    phone_number, client_id = registration_data.split("|")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    registration_result = await auth_service.complete_phone_registration(
        phone_number=phone_number,
        telegram_id=user.id,
        first_name=user.first_name,
        last_name=user.last_name,
        username=user.username
    )
    
    if registration_result['success']:
        # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        await callback.message.edit_text(
            f"üéâ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é –∫–ª–∏–µ–Ω—Ç–∞.\n\n"
            f"**–ß—Ç–æ –¥–∞–ª—å—à–µ:**\n"
            f"‚Ä¢ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            f"‚Ä¢ –£ –≤–∞—Å –±—É–¥–µ—Ç 5 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É\n"
            f"‚Ä¢ –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help\n\n"
            f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!** üîê",
            reply_markup=get_main_menu_keyboard()
        )
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await redis_service.redis.delete(f"registration:{user.id}")
        
        await callback.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    else:
        # –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        error_messages = {
            'phone_not_found': "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ",
            'telegram_already_registered': "–≠—Ç–æ—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É",
            'internal_error': "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
        }
        
        error_text = error_messages.get(
            registration_result.get('error'), 
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        )
        
        await callback.answer(f"‚ùå {error_text}", show_alert=True)
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏**\n\n"
            f"{registration_result.get('message', error_text)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


@router.callback_query(F.data == "retry_registration")
async def retry_registration(callback: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
    await callback.message.delete()
    await cmd_start(callback.message)
    await callback.answer()


# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.from_user.id
    is_registered = await auth_service.is_user_registered(user_id)
    
    if not is_registered:
        help_text = """
üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏**

‚ùå **–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ**

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1. –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start
2. –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ –ø—Ä–æ—Ñ–∏–ª—é –∫–ª–∏–µ–Ω—Ç–∞

–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –æ–ø–µ—Ä–∞—Ü–∏–π.
"""
    else:
        help_text = """
üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**

‚úÖ **–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ**

üîπ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ –ö–æ–≥–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è, —Ç—Ä–µ–±—É—é—â–∞—è –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –£ –≤–∞—Å –±—É–¥–µ—Ç 5 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ "‚úÖ –î–∞, —Ä–∞–∑—Ä–µ—à–∞—é" –∏–ª–∏ "‚ùå –ù–µ—Ç, –æ—Ç–∫–ª–æ–Ω—è—é"
‚Ä¢ –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è

üîπ **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
/support - –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã
‚Ä¢ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∫–ª–∏–µ–Ω—Ç–∞
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
"""
    
    await message.answer(help_text)


@router.message(Command("support"))
async def cmd_support(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support"""
    support_text = f"""
üÜò **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:

üìß **Email:** support@yourcompany.com
üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** +7 (XXX) XXX-XX-XX  
üïê **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** 9:00 - 18:00 (–ú–°–ö)

**–ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ:**
‚Ä¢ –í–∞—à Telegram ID: `{message.from_user.id}`
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è

**–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**
‚Ä¢ –ù–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç
‚Ä¢ –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
‚Ä¢ –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å - —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–æ–ª–∏, —Ç–æ–ª—å–∫–æ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
"""
    
    await message.answer(support_text)


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –î–õ–Ø –ú–ï–ù–Æ ==========

@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """Callback –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"""
    await cmd_help(callback.message)
    await callback.answer()


@router.callback_query(F.data == "support")
async def callback_support(callback: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await cmd_support(callback.message)
    await callback.answer()


# ========== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ==========

@router.callback_query(F.data.startswith("auth_"))
async def handle_auth_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await auth_service.is_user_registered(callback.from_user.id):
            await callback.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", 
                show_alert=True
            )
            return
        
        # –ü–∞—Ä—Å–∏–º callback_data
        action, request_id = callback.data.split(":", 1)
        user_id = callback.from_user.id
        
        logger.info(f"Auth callback: {action} for request {request_id} from user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ Redis
        request_info = await redis_service.get_auth_request(request_id)
        
        if not request_info:
            await callback.answer(
                "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", 
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
        if request_info.get('telegram_id') != user_id:
            await callback.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", 
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if request_info.get('status') != 'pending':
            await callback.answer(
                f"‚ùå –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {request_info.get('status')}", 
                show_alert=True
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if action == "auth_approve":
            await auth_service.approve_request(request_id, user_id)
            result_text = "‚úÖ **–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞**\n\n–í–∞—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É."
            callback_text = "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
            
        elif action == "auth_reject":
            await auth_service.reject_request(request_id, user_id)
            result_text = "‚ùå **–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n–í–∞—à –æ—Ç–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–∏—Å—Ç–µ–º—É."
            callback_text = "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.answer(callback_text, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        original_text = callback.message.html_text
        updated_text = f"{original_text}\n\n{result_text}"
        
        await callback.message.edit_text(
            updated_text,
            reply_markup=get_auth_result_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error handling auth callback: {e}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", 
            show_alert=True
        )


@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" """
    await callback.message.delete()
    await cmd_start(callback.message)
    await callback.answer()


async def send_auth_request_to_user(
    telegram_id: int,
    request_id: str,
    operation: str,
    amount: str = None,
    client_id: str = None
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        from app.bot.bot import bot
        
        # –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if not await auth_service.is_user_registered(telegram_id):
            logger.warning(f"Attempt to send auth request to unregistered user {telegram_id}")
            raise ValueError("User not registered in the system")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"""
üîê **–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏**

üë§ **–ö–ª–∏–µ–Ω—Ç:** {client_id}
üí∞ **–û–ø–µ—Ä–∞—Ü–∏—è:** {operation}
"""
        
        if amount:
            message_text += f"\nüíµ **–°—É–º–º–∞:** {amount}"
        
        message_text += """

‚è∞ **–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è:** 5 –º–∏–Ω—É—Ç

*–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏?*
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.send_message(
            chat_id=telegram_id,
            text=message_text,
            reply_markup=get_auth_keyboard(request_id)
        )
        
        logger.info(f"Auth request sent to user {telegram_id}")
        
    except Exception as e:
        logger.error(f"Error sending auth request to user: {e}")
        raise
